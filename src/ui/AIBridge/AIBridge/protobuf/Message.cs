// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AIBridge {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEghBSUJyaWRnZSJJCgZQbGF5ZXISHAoEcm9sZRgB",
            "IAEoDjIOLkFJQnJpZGdlLlJvbGUSIQoEc2VhdBgCIAEoDjITLkFJQnJpZGdl",
            "LkRpcmVjdGlvbiIyCgRDYXJkEhwKBHN1aXQYASABKA4yDi5BSUJyaWRnZS5T",
            "dWl0EgwKBHJhbmsYAiABKA0iRgoFUm91bmQSHgoEbGVhZBgBIAEoCzIQLkFJ",
            "QnJpZGdlLlBsYXllchIdCgVjYXJkcxgCIAMoCzIOLkFJQnJpZGdlLkNhcmQi",
            "kAMKEEN1cnJlbnRTaXR1YXRpb24SDwoHdGFibGVJRBgBIAEoDRIkCg12dWxu",
            "ZXJhYmlsaXR5GAIgASgOMg0uQUlCcmlkZ2UuVnVsEiQKCGNvbnRyYWN0GAMg",
            "ASgLMhIuQUlCcmlkZ2UuQ29udHJhY3QSIgoId2hvc1R1cm4YBCABKAsyEC5B",
            "SUJyaWRnZS5QbGF5ZXISFAoMZmluaXNoZWREdW1zGAUgASgNEhcKD2NvbnRy",
            "YWN0ZXJTY29yZRgGIAEoDRIVCg1kZWZlbmRlclNjb3JlGAcgASgNEiUKDWRl",
            "Y2xhcmVyQ2FyZHMYCCADKAsyDi5BSUJyaWRnZS5DYXJkEiEKCWxvcHBDYXJk",
            "cxgJIAMoCzIOLkFJQnJpZGdlLkNhcmQSIgoKZHVtbXlDYXJkcxgKIAMoCzIO",
            "LkFJQnJpZGdlLkNhcmQSIQoJcm9wcENhcmRzGAsgAygLMg4uQUlCcmlkZ2Uu",
            "Q2FyZBIkCgtwbGF5SGlzdG9yeRgMIAMoCzIPLkFJQnJpZGdlLlJvdW5kIsAB",
            "CghDb250cmFjdBIPCgdkZWNpZGVkGAEgASgIEhwKBHN1aXQYAiABKA4yDi5B",
            "SUJyaWRnZS5TdWl0Eg0KBWxldmVsGAMgASgNEisKB2RvdWJsZWQYBCABKA4y",
            "Gi5BSUJyaWRnZS5Db250cmFjdC5Eb3VibGVkEicKD2NvbnRyYWN0SGlzdG9y",
            "eRgFIAMoCzIOLkFJQnJpZGdlLkNhcmQiIAoHRG91YmxlZBIGCgJOTxAAEgUK",
            "AVgQARIGCgJYWBACIjUKBUhlbGxvEh4KBHNlYXQYASABKAsyEC5BSUJyaWRn",
            "ZS5QbGF5ZXISDAoEY29kZRgCIAEoDSI+Cg1IZWxsb1Jlc3BvbnNlEg4KBnNl",
            "YXRlZBgBIAEoCBIPCgd0YWJsZUlEGAIgASgNEgwKBGNvZGUYAyABKA0ijgIK",
            "CUdhbWVTdGF0ZRIPCgd0YWJsZUlEGAEgASgNEiQKDXZ1bG5lcmFiaWxpdHkY",
            "AiABKA4yDS5BSUJyaWRnZS5WdWwSHQoDd2hvGAMgASgLMhAuQUlCcmlkZ2Uu",
            "UGxheWVyEhwKBGhhbmQYBCADKAsyDi5BSUJyaWRnZS5DYXJkEh0KBWR1bW15",
            "GAUgAygLMg4uQUlCcmlkZ2UuQ2FyZBIkCgtwbGF5SGlzdG9yeRgGIAMoCzIP",
            "LkFJQnJpZGdlLlJvdW5kEiQKCGNvbnRyYWN0GAcgASgLMhIuQUlCcmlkZ2Uu",
            "Q29udHJhY3QSIgoKdmFsaWRQbGF5cxgIIAMoCzIOLkFJQnJpZGdlLkNhcmQi",
            "VAoEUGxheRIPCgd0YWJsZUlEGAEgASgNEh0KA3dobxgCIAEoCzIQLkFJQnJp",
            "ZGdlLlBsYXllchIcCgRjYXJkGAMgASgLMg4uQUlCcmlkZ2UuQ2FyZCKUAQoK",
            "R2FtZVJlc3VsdBIPCgd0YWJsZUlEGAEgASgNEiQKCGNvbnRyYWN0GAIgASgL",
            "MhIuQUlCcmlkZ2UuQ29udHJhY3QSDgoGcmVzdWx0GAMgASgFEhUKDWRlY2xh",
            "cmVyU2NvcmUYBCABKAUSEwoLZGVjbGFyZXJQYXIYBSABKAUSEwoLZGVjbGFy",
            "ZXJJTVAYBiABKAUqOwoEUm9sZRIMCghERUNMQVJFUhAAEggKBExPUFAQARIJ",
            "CgVEVU1NWRACEggKBFJPUFAQAxIGCgJOTxAEKjUKCURpcmVjdGlvbhIJCgVO",
            "T1JUSBAAEggKBEVBU1QQARIJCgVTT1VUSBACEggKBFdFU1QQAyqMAQoEU3Vp",
            "dBIICgRDTFVCEAASBQoBQxAAEgsKB0RJQU1PTkQQARIFCgFEEAESCQoFSEVB",
            "UlQQAhIFCgFIEAISCQoFU1BBREUQAxIFCgFTEAMSCwoHTk9UUlVNUBAEEgYK",
            "Ak5UEAQSCgoGRE9VQkxFEAUSBQoBWBAFEggKBFBBU1MQBhIFCgFQEAYaAhAB",
            "KjUKA1Z1bBIICgROT05FEAASDAoIQ09OVFJBQ1QQARIMCghERUZFTkRFUhAC",
            "EggKBEJPVEgQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AIBridge.Role), typeof(global::AIBridge.Direction), typeof(global::AIBridge.Suit), typeof(global::AIBridge.Vul), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.Player), global::AIBridge.Player.Parser, new[]{ "Role", "Seat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.Card), global::AIBridge.Card.Parser, new[]{ "Suit", "Rank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.Round), global::AIBridge.Round.Parser, new[]{ "Lead", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.CurrentSituation), global::AIBridge.CurrentSituation.Parser, new[]{ "TableID", "Vulnerability", "Contract", "WhosTurn", "FinishedDums", "ContracterScore", "DefenderScore", "DeclarerCards", "LoppCards", "DummyCards", "RoppCards", "PlayHistory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.Contract), global::AIBridge.Contract.Parser, new[]{ "Decided", "Suit", "Level", "Doubled", "ContractHistory" }, null, new[]{ typeof(global::AIBridge.Contract.Types.Doubled) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.Hello), global::AIBridge.Hello.Parser, new[]{ "Seat", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.HelloResponse), global::AIBridge.HelloResponse.Parser, new[]{ "Seated", "TableID", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.GameState), global::AIBridge.GameState.Parser, new[]{ "TableID", "Vulnerability", "Who", "Hand", "Dummy", "PlayHistory", "Contract", "ValidPlays" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.Play), global::AIBridge.Play.Parser, new[]{ "TableID", "Who", "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AIBridge.GameResult), global::AIBridge.GameResult.Parser, new[]{ "TableID", "Contract", "Result", "DeclarerScore", "DeclarerPar", "DeclarerIMP" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Role {
    [pbr::OriginalName("DECLARER")] Declarer = 0,
    [pbr::OriginalName("LOPP")] Lopp = 1,
    [pbr::OriginalName("DUMMY")] Dummy = 2,
    [pbr::OriginalName("ROPP")] Ropp = 3,
    [pbr::OriginalName("NO")] No = 4,
  }

  public enum Direction {
    [pbr::OriginalName("NORTH")] North = 0,
    [pbr::OriginalName("EAST")] East = 1,
    [pbr::OriginalName("SOUTH")] South = 2,
    [pbr::OriginalName("WEST")] West = 3,
  }

  public enum Suit {
    [pbr::OriginalName("CLUB")] Club = 0,
    [pbr::OriginalName("C", PreferredAlias = false)] C = 0,
    [pbr::OriginalName("DIAMOND")] Diamond = 1,
    [pbr::OriginalName("D", PreferredAlias = false)] D = 1,
    [pbr::OriginalName("HEART")] Heart = 2,
    [pbr::OriginalName("H", PreferredAlias = false)] H = 2,
    [pbr::OriginalName("SPADE")] Spade = 3,
    [pbr::OriginalName("S", PreferredAlias = false)] S = 3,
    [pbr::OriginalName("NOTRUMP")] Notrump = 4,
    [pbr::OriginalName("NT", PreferredAlias = false)] Nt = 4,
    [pbr::OriginalName("DOUBLE")] Double = 5,
    [pbr::OriginalName("X", PreferredAlias = false)] X = 5,
    [pbr::OriginalName("PASS")] Pass = 6,
    [pbr::OriginalName("P", PreferredAlias = false)] P = 6,
  }

  public enum Vul {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("CONTRACT")] Contract = 1,
    [pbr::OriginalName("DEFENDER")] Defender = 2,
    [pbr::OriginalName("BOTH")] Both = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      role_ = other.role_;
      seat_ = other.seat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::AIBridge.Role role_ = global::AIBridge.Role.Declarer;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 2;
    private global::AIBridge.Direction seat_ = global::AIBridge.Direction.North;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Direction Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Seat != other.Seat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != global::AIBridge.Role.Declarer) hash ^= Role.GetHashCode();
      if (Seat != global::AIBridge.Direction.North) hash ^= Seat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Role != global::AIBridge.Role.Declarer) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Seat != global::AIBridge.Direction.North) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Seat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Role != global::AIBridge.Role.Declarer) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Seat != global::AIBridge.Direction.North) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Seat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != global::AIBridge.Role.Declarer) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Seat != global::AIBridge.Direction.North) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Seat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Role != global::AIBridge.Role.Declarer) {
        Role = other.Role;
      }
      if (other.Seat != global::AIBridge.Direction.North) {
        Seat = other.Seat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Role = (global::AIBridge.Role) input.ReadEnum();
            break;
          }
          case 16: {
            Seat = (global::AIBridge.Direction) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Role = (global::AIBridge.Role) input.ReadEnum();
            break;
          }
          case 16: {
            Seat = (global::AIBridge.Direction) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      suit_ = other.suit_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 1;
    private global::AIBridge.Suit suit_ = global::AIBridge.Suit.Club;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Suit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suit != other.Suit) return false;
      if (Rank != other.Rank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suit != global::AIBridge.Suit.Club) hash ^= Suit.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Suit != global::AIBridge.Suit.Club) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Suit != global::AIBridge.Suit.Club) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suit != global::AIBridge.Suit.Club) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Suit != global::AIBridge.Suit.Club) {
        Suit = other.Suit;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Suit = (global::AIBridge.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Suit = (global::AIBridge.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Round : pb::IMessage<Round>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      lead_ = other.lead_ != null ? other.lead_.Clone() : null;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "lead" field.</summary>
    public const int LeadFieldNumber = 1;
    private global::AIBridge.Player lead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Player Lead {
      get { return lead_; }
      set {
        lead_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> cards_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lead, other.Lead)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lead_ != null) hash ^= Lead.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (lead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lead);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (lead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lead);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lead);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      if (other.lead_ != null) {
        if (lead_ == null) {
          Lead = new global::AIBridge.Player();
        }
        Lead.MergeFrom(other.Lead);
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lead_ == null) {
              Lead = new global::AIBridge.Player();
            }
            input.ReadMessage(Lead);
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (lead_ == null) {
              Lead = new global::AIBridge.Player();
            }
            input.ReadMessage(Lead);
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CurrentSituation : pb::IMessage<CurrentSituation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrentSituation> _parser = new pb::MessageParser<CurrentSituation>(() => new CurrentSituation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentSituation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentSituation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentSituation(CurrentSituation other) : this() {
      tableID_ = other.tableID_;
      vulnerability_ = other.vulnerability_;
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      whosTurn_ = other.whosTurn_ != null ? other.whosTurn_.Clone() : null;
      finishedDums_ = other.finishedDums_;
      contracterScore_ = other.contracterScore_;
      defenderScore_ = other.defenderScore_;
      declarerCards_ = other.declarerCards_.Clone();
      loppCards_ = other.loppCards_.Clone();
      dummyCards_ = other.dummyCards_.Clone();
      roppCards_ = other.roppCards_.Clone();
      playHistory_ = other.playHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentSituation Clone() {
      return new CurrentSituation(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 2;
    private global::AIBridge.Vul vulnerability_ = global::AIBridge.Vul.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Vul Vulnerability {
      get { return vulnerability_; }
      set {
        vulnerability_ = value;
      }
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 3;
    private global::AIBridge.Contract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Contract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    /// <summary>Field number for the "whosTurn" field.</summary>
    public const int WhosTurnFieldNumber = 4;
    private global::AIBridge.Player whosTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Player WhosTurn {
      get { return whosTurn_; }
      set {
        whosTurn_ = value;
      }
    }

    /// <summary>Field number for the "finishedDums" field.</summary>
    public const int FinishedDumsFieldNumber = 5;
    private uint finishedDums_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishedDums {
      get { return finishedDums_; }
      set {
        finishedDums_ = value;
      }
    }

    /// <summary>Field number for the "contracterScore" field.</summary>
    public const int ContracterScoreFieldNumber = 6;
    private uint contracterScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContracterScore {
      get { return contracterScore_; }
      set {
        contracterScore_ = value;
      }
    }

    /// <summary>Field number for the "defenderScore" field.</summary>
    public const int DefenderScoreFieldNumber = 7;
    private uint defenderScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefenderScore {
      get { return defenderScore_; }
      set {
        defenderScore_ = value;
      }
    }

    /// <summary>Field number for the "declarerCards" field.</summary>
    public const int DeclarerCardsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_declarerCards_codec
        = pb::FieldCodec.ForMessage(66, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> declarerCards_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> DeclarerCards {
      get { return declarerCards_; }
    }

    /// <summary>Field number for the "loppCards" field.</summary>
    public const int LoppCardsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_loppCards_codec
        = pb::FieldCodec.ForMessage(74, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> loppCards_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> LoppCards {
      get { return loppCards_; }
    }

    /// <summary>Field number for the "dummyCards" field.</summary>
    public const int DummyCardsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_dummyCards_codec
        = pb::FieldCodec.ForMessage(82, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> dummyCards_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> DummyCards {
      get { return dummyCards_; }
    }

    /// <summary>Field number for the "roppCards" field.</summary>
    public const int RoppCardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_roppCards_codec
        = pb::FieldCodec.ForMessage(90, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> roppCards_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> RoppCards {
      get { return roppCards_; }
    }

    /// <summary>Field number for the "playHistory" field.</summary>
    public const int PlayHistoryFieldNumber = 12;
    private static readonly pb::FieldCodec<global::AIBridge.Round> _repeated_playHistory_codec
        = pb::FieldCodec.ForMessage(98, global::AIBridge.Round.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Round> playHistory_ = new pbc::RepeatedField<global::AIBridge.Round>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Round> PlayHistory {
      get { return playHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentSituation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentSituation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (Vulnerability != other.Vulnerability) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      if (!object.Equals(WhosTurn, other.WhosTurn)) return false;
      if (FinishedDums != other.FinishedDums) return false;
      if (ContracterScore != other.ContracterScore) return false;
      if (DefenderScore != other.DefenderScore) return false;
      if(!declarerCards_.Equals(other.declarerCards_)) return false;
      if(!loppCards_.Equals(other.loppCards_)) return false;
      if(!dummyCards_.Equals(other.dummyCards_)) return false;
      if(!roppCards_.Equals(other.roppCards_)) return false;
      if(!playHistory_.Equals(other.playHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (Vulnerability != global::AIBridge.Vul.None) hash ^= Vulnerability.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      if (whosTurn_ != null) hash ^= WhosTurn.GetHashCode();
      if (FinishedDums != 0) hash ^= FinishedDums.GetHashCode();
      if (ContracterScore != 0) hash ^= ContracterScore.GetHashCode();
      if (DefenderScore != 0) hash ^= DefenderScore.GetHashCode();
      hash ^= declarerCards_.GetHashCode();
      hash ^= loppCards_.GetHashCode();
      hash ^= dummyCards_.GetHashCode();
      hash ^= roppCards_.GetHashCode();
      hash ^= playHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Vulnerability != global::AIBridge.Vul.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Vulnerability);
      }
      if (contract_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Contract);
      }
      if (whosTurn_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WhosTurn);
      }
      if (FinishedDums != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FinishedDums);
      }
      if (ContracterScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ContracterScore);
      }
      if (DefenderScore != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DefenderScore);
      }
      declarerCards_.WriteTo(output, _repeated_declarerCards_codec);
      loppCards_.WriteTo(output, _repeated_loppCards_codec);
      dummyCards_.WriteTo(output, _repeated_dummyCards_codec);
      roppCards_.WriteTo(output, _repeated_roppCards_codec);
      playHistory_.WriteTo(output, _repeated_playHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Vulnerability != global::AIBridge.Vul.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Vulnerability);
      }
      if (contract_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Contract);
      }
      if (whosTurn_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WhosTurn);
      }
      if (FinishedDums != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FinishedDums);
      }
      if (ContracterScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ContracterScore);
      }
      if (DefenderScore != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DefenderScore);
      }
      declarerCards_.WriteTo(ref output, _repeated_declarerCards_codec);
      loppCards_.WriteTo(ref output, _repeated_loppCards_codec);
      dummyCards_.WriteTo(ref output, _repeated_dummyCards_codec);
      roppCards_.WriteTo(ref output, _repeated_roppCards_codec);
      playHistory_.WriteTo(ref output, _repeated_playHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (Vulnerability != global::AIBridge.Vul.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Vulnerability);
      }
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      if (whosTurn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhosTurn);
      }
      if (FinishedDums != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishedDums);
      }
      if (ContracterScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContracterScore);
      }
      if (DefenderScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefenderScore);
      }
      size += declarerCards_.CalculateSize(_repeated_declarerCards_codec);
      size += loppCards_.CalculateSize(_repeated_loppCards_codec);
      size += dummyCards_.CalculateSize(_repeated_dummyCards_codec);
      size += roppCards_.CalculateSize(_repeated_roppCards_codec);
      size += playHistory_.CalculateSize(_repeated_playHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentSituation other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.Vulnerability != global::AIBridge.Vul.None) {
        Vulnerability = other.Vulnerability;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::AIBridge.Contract();
        }
        Contract.MergeFrom(other.Contract);
      }
      if (other.whosTurn_ != null) {
        if (whosTurn_ == null) {
          WhosTurn = new global::AIBridge.Player();
        }
        WhosTurn.MergeFrom(other.WhosTurn);
      }
      if (other.FinishedDums != 0) {
        FinishedDums = other.FinishedDums;
      }
      if (other.ContracterScore != 0) {
        ContracterScore = other.ContracterScore;
      }
      if (other.DefenderScore != 0) {
        DefenderScore = other.DefenderScore;
      }
      declarerCards_.Add(other.declarerCards_);
      loppCards_.Add(other.loppCards_);
      dummyCards_.Add(other.dummyCards_);
      roppCards_.Add(other.roppCards_);
      playHistory_.Add(other.playHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Vulnerability = (global::AIBridge.Vul) input.ReadEnum();
            break;
          }
          case 26: {
            if (contract_ == null) {
              Contract = new global::AIBridge.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 34: {
            if (whosTurn_ == null) {
              WhosTurn = new global::AIBridge.Player();
            }
            input.ReadMessage(WhosTurn);
            break;
          }
          case 40: {
            FinishedDums = input.ReadUInt32();
            break;
          }
          case 48: {
            ContracterScore = input.ReadUInt32();
            break;
          }
          case 56: {
            DefenderScore = input.ReadUInt32();
            break;
          }
          case 66: {
            declarerCards_.AddEntriesFrom(input, _repeated_declarerCards_codec);
            break;
          }
          case 74: {
            loppCards_.AddEntriesFrom(input, _repeated_loppCards_codec);
            break;
          }
          case 82: {
            dummyCards_.AddEntriesFrom(input, _repeated_dummyCards_codec);
            break;
          }
          case 90: {
            roppCards_.AddEntriesFrom(input, _repeated_roppCards_codec);
            break;
          }
          case 98: {
            playHistory_.AddEntriesFrom(input, _repeated_playHistory_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Vulnerability = (global::AIBridge.Vul) input.ReadEnum();
            break;
          }
          case 26: {
            if (contract_ == null) {
              Contract = new global::AIBridge.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 34: {
            if (whosTurn_ == null) {
              WhosTurn = new global::AIBridge.Player();
            }
            input.ReadMessage(WhosTurn);
            break;
          }
          case 40: {
            FinishedDums = input.ReadUInt32();
            break;
          }
          case 48: {
            ContracterScore = input.ReadUInt32();
            break;
          }
          case 56: {
            DefenderScore = input.ReadUInt32();
            break;
          }
          case 66: {
            declarerCards_.AddEntriesFrom(ref input, _repeated_declarerCards_codec);
            break;
          }
          case 74: {
            loppCards_.AddEntriesFrom(ref input, _repeated_loppCards_codec);
            break;
          }
          case 82: {
            dummyCards_.AddEntriesFrom(ref input, _repeated_dummyCards_codec);
            break;
          }
          case 90: {
            roppCards_.AddEntriesFrom(ref input, _repeated_roppCards_codec);
            break;
          }
          case 98: {
            playHistory_.AddEntriesFrom(ref input, _repeated_playHistory_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Contract : pb::IMessage<Contract>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract(Contract other) : this() {
      decided_ = other.decided_;
      suit_ = other.suit_;
      level_ = other.level_;
      doubled_ = other.doubled_;
      contractHistory_ = other.contractHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract Clone() {
      return new Contract(this);
    }

    /// <summary>Field number for the "decided" field.</summary>
    public const int DecidedFieldNumber = 1;
    private bool decided_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Decided {
      get { return decided_; }
      set {
        decided_ = value;
      }
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 2;
    private global::AIBridge.Suit suit_ = global::AIBridge.Suit.Club;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Suit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "doubled" field.</summary>
    public const int DoubledFieldNumber = 4;
    private global::AIBridge.Contract.Types.Doubled doubled_ = global::AIBridge.Contract.Types.Doubled.No;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Contract.Types.Doubled Doubled {
      get { return doubled_; }
      set {
        doubled_ = value;
      }
    }

    /// <summary>Field number for the "contractHistory" field.</summary>
    public const int ContractHistoryFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_contractHistory_codec
        = pb::FieldCodec.ForMessage(42, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> contractHistory_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> ContractHistory {
      get { return contractHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Decided != other.Decided) return false;
      if (Suit != other.Suit) return false;
      if (Level != other.Level) return false;
      if (Doubled != other.Doubled) return false;
      if(!contractHistory_.Equals(other.contractHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Decided != false) hash ^= Decided.GetHashCode();
      if (Suit != global::AIBridge.Suit.Club) hash ^= Suit.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Doubled != global::AIBridge.Contract.Types.Doubled.No) hash ^= Doubled.GetHashCode();
      hash ^= contractHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Decided != false) {
        output.WriteRawTag(8);
        output.WriteBool(Decided);
      }
      if (Suit != global::AIBridge.Suit.Club) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Suit);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Doubled != global::AIBridge.Contract.Types.Doubled.No) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Doubled);
      }
      contractHistory_.WriteTo(output, _repeated_contractHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Decided != false) {
        output.WriteRawTag(8);
        output.WriteBool(Decided);
      }
      if (Suit != global::AIBridge.Suit.Club) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Suit);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Doubled != global::AIBridge.Contract.Types.Doubled.No) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Doubled);
      }
      contractHistory_.WriteTo(ref output, _repeated_contractHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Decided != false) {
        size += 1 + 1;
      }
      if (Suit != global::AIBridge.Suit.Club) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Doubled != global::AIBridge.Contract.Types.Doubled.No) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Doubled);
      }
      size += contractHistory_.CalculateSize(_repeated_contractHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contract other) {
      if (other == null) {
        return;
      }
      if (other.Decided != false) {
        Decided = other.Decided;
      }
      if (other.Suit != global::AIBridge.Suit.Club) {
        Suit = other.Suit;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Doubled != global::AIBridge.Contract.Types.Doubled.No) {
        Doubled = other.Doubled;
      }
      contractHistory_.Add(other.contractHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Decided = input.ReadBool();
            break;
          }
          case 16: {
            Suit = (global::AIBridge.Suit) input.ReadEnum();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Doubled = (global::AIBridge.Contract.Types.Doubled) input.ReadEnum();
            break;
          }
          case 42: {
            contractHistory_.AddEntriesFrom(input, _repeated_contractHistory_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Decided = input.ReadBool();
            break;
          }
          case 16: {
            Suit = (global::AIBridge.Suit) input.ReadEnum();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Doubled = (global::AIBridge.Contract.Types.Doubled) input.ReadEnum();
            break;
          }
          case 42: {
            contractHistory_.AddEntriesFrom(ref input, _repeated_contractHistory_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Contract message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Doubled {
        [pbr::OriginalName("NO")] No = 0,
        [pbr::OriginalName("X")] X = 1,
        [pbr::OriginalName("XX")] Xx = 2,
      }

    }
    #endregion

  }

  public sealed partial class Hello : pb::IMessage<Hello>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hello> _parser = new pb::MessageParser<Hello>(() => new Hello());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hello> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hello() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hello(Hello other) : this() {
      seat_ = other.seat_ != null ? other.seat_.Clone() : null;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hello Clone() {
      return new Hello(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 1;
    private global::AIBridge.Player seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Player Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hello);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hello other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Seat, other.Seat)) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (seat_ != null) hash ^= Seat.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (seat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Seat);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (seat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Seat);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (seat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seat);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hello other) {
      if (other == null) {
        return;
      }
      if (other.seat_ != null) {
        if (seat_ == null) {
          Seat = new global::AIBridge.Player();
        }
        Seat.MergeFrom(other.Seat);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (seat_ == null) {
              Seat = new global::AIBridge.Player();
            }
            input.ReadMessage(Seat);
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (seat_ == null) {
              Seat = new global::AIBridge.Player();
            }
            input.ReadMessage(Seat);
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HelloResponse : pb::IMessage<HelloResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HelloResponse> _parser = new pb::MessageParser<HelloResponse>(() => new HelloResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse(HelloResponse other) : this() {
      seated_ = other.seated_;
      tableID_ = other.tableID_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse Clone() {
      return new HelloResponse(this);
    }

    /// <summary>Field number for the "seated" field.</summary>
    public const int SeatedFieldNumber = 1;
    private bool seated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Seated {
      get { return seated_; }
      set {
        seated_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 2;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seated != other.Seated) return false;
      if (TableID != other.TableID) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seated != false) hash ^= Seated.GetHashCode();
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Seated);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TableID);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Seated);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TableID);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seated != false) {
        size += 1 + 1;
      }
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloResponse other) {
      if (other == null) {
        return;
      }
      if (other.Seated != false) {
        Seated = other.Seated;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seated = input.ReadBool();
            break;
          }
          case 16: {
            TableID = input.ReadUInt32();
            break;
          }
          case 24: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seated = input.ReadBool();
            break;
          }
          case 16: {
            TableID = input.ReadUInt32();
            break;
          }
          case 24: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      tableID_ = other.tableID_;
      vulnerability_ = other.vulnerability_;
      who_ = other.who_ != null ? other.who_.Clone() : null;
      hand_ = other.hand_.Clone();
      dummy_ = other.dummy_.Clone();
      playHistory_ = other.playHistory_.Clone();
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      validPlays_ = other.validPlays_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 2;
    private global::AIBridge.Vul vulnerability_ = global::AIBridge.Vul.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Vul Vulnerability {
      get { return vulnerability_; }
      set {
        vulnerability_ = value;
      }
    }

    /// <summary>Field number for the "who" field.</summary>
    public const int WhoFieldNumber = 3;
    private global::AIBridge.Player who_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Player Who {
      get { return who_; }
      set {
        who_ = value;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_hand_codec
        = pb::FieldCodec.ForMessage(34, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> hand_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> Hand {
      get { return hand_; }
    }

    /// <summary>Field number for the "dummy" field.</summary>
    public const int DummyFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_dummy_codec
        = pb::FieldCodec.ForMessage(42, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> dummy_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> Dummy {
      get { return dummy_; }
    }

    /// <summary>Field number for the "playHistory" field.</summary>
    public const int PlayHistoryFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AIBridge.Round> _repeated_playHistory_codec
        = pb::FieldCodec.ForMessage(50, global::AIBridge.Round.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Round> playHistory_ = new pbc::RepeatedField<global::AIBridge.Round>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Round> PlayHistory {
      get { return playHistory_; }
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 7;
    private global::AIBridge.Contract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Contract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    /// <summary>Field number for the "validPlays" field.</summary>
    public const int ValidPlaysFieldNumber = 8;
    private static readonly pb::FieldCodec<global::AIBridge.Card> _repeated_validPlays_codec
        = pb::FieldCodec.ForMessage(66, global::AIBridge.Card.Parser);
    private readonly pbc::RepeatedField<global::AIBridge.Card> validPlays_ = new pbc::RepeatedField<global::AIBridge.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AIBridge.Card> ValidPlays {
      get { return validPlays_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (Vulnerability != other.Vulnerability) return false;
      if (!object.Equals(Who, other.Who)) return false;
      if(!hand_.Equals(other.hand_)) return false;
      if(!dummy_.Equals(other.dummy_)) return false;
      if(!playHistory_.Equals(other.playHistory_)) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      if(!validPlays_.Equals(other.validPlays_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (Vulnerability != global::AIBridge.Vul.None) hash ^= Vulnerability.GetHashCode();
      if (who_ != null) hash ^= Who.GetHashCode();
      hash ^= hand_.GetHashCode();
      hash ^= dummy_.GetHashCode();
      hash ^= playHistory_.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      hash ^= validPlays_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Vulnerability != global::AIBridge.Vul.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Vulnerability);
      }
      if (who_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Who);
      }
      hand_.WriteTo(output, _repeated_hand_codec);
      dummy_.WriteTo(output, _repeated_dummy_codec);
      playHistory_.WriteTo(output, _repeated_playHistory_codec);
      if (contract_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Contract);
      }
      validPlays_.WriteTo(output, _repeated_validPlays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Vulnerability != global::AIBridge.Vul.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Vulnerability);
      }
      if (who_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Who);
      }
      hand_.WriteTo(ref output, _repeated_hand_codec);
      dummy_.WriteTo(ref output, _repeated_dummy_codec);
      playHistory_.WriteTo(ref output, _repeated_playHistory_codec);
      if (contract_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Contract);
      }
      validPlays_.WriteTo(ref output, _repeated_validPlays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (Vulnerability != global::AIBridge.Vul.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Vulnerability);
      }
      if (who_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Who);
      }
      size += hand_.CalculateSize(_repeated_hand_codec);
      size += dummy_.CalculateSize(_repeated_dummy_codec);
      size += playHistory_.CalculateSize(_repeated_playHistory_codec);
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      size += validPlays_.CalculateSize(_repeated_validPlays_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.Vulnerability != global::AIBridge.Vul.None) {
        Vulnerability = other.Vulnerability;
      }
      if (other.who_ != null) {
        if (who_ == null) {
          Who = new global::AIBridge.Player();
        }
        Who.MergeFrom(other.Who);
      }
      hand_.Add(other.hand_);
      dummy_.Add(other.dummy_);
      playHistory_.Add(other.playHistory_);
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::AIBridge.Contract();
        }
        Contract.MergeFrom(other.Contract);
      }
      validPlays_.Add(other.validPlays_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Vulnerability = (global::AIBridge.Vul) input.ReadEnum();
            break;
          }
          case 26: {
            if (who_ == null) {
              Who = new global::AIBridge.Player();
            }
            input.ReadMessage(Who);
            break;
          }
          case 34: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
          case 42: {
            dummy_.AddEntriesFrom(input, _repeated_dummy_codec);
            break;
          }
          case 50: {
            playHistory_.AddEntriesFrom(input, _repeated_playHistory_codec);
            break;
          }
          case 58: {
            if (contract_ == null) {
              Contract = new global::AIBridge.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 66: {
            validPlays_.AddEntriesFrom(input, _repeated_validPlays_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Vulnerability = (global::AIBridge.Vul) input.ReadEnum();
            break;
          }
          case 26: {
            if (who_ == null) {
              Who = new global::AIBridge.Player();
            }
            input.ReadMessage(Who);
            break;
          }
          case 34: {
            hand_.AddEntriesFrom(ref input, _repeated_hand_codec);
            break;
          }
          case 42: {
            dummy_.AddEntriesFrom(ref input, _repeated_dummy_codec);
            break;
          }
          case 50: {
            playHistory_.AddEntriesFrom(ref input, _repeated_playHistory_codec);
            break;
          }
          case 58: {
            if (contract_ == null) {
              Contract = new global::AIBridge.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 66: {
            validPlays_.AddEntriesFrom(ref input, _repeated_validPlays_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Play : pb::IMessage<Play>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Play> _parser = new pb::MessageParser<Play>(() => new Play());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Play> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play(Play other) : this() {
      tableID_ = other.tableID_;
      who_ = other.who_ != null ? other.who_.Clone() : null;
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play Clone() {
      return new Play(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "who" field.</summary>
    public const int WhoFieldNumber = 2;
    private global::AIBridge.Player who_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Player Who {
      get { return who_; }
      set {
        who_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 3;
    private global::AIBridge.Card card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Play);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Play other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (!object.Equals(Who, other.Who)) return false;
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (who_ != null) hash ^= Who.GetHashCode();
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (who_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Who);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (who_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Who);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (who_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Who);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Play other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.who_ != null) {
        if (who_ == null) {
          Who = new global::AIBridge.Player();
        }
        Who.MergeFrom(other.Who);
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::AIBridge.Card();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (who_ == null) {
              Who = new global::AIBridge.Player();
            }
            input.ReadMessage(Who);
            break;
          }
          case 26: {
            if (card_ == null) {
              Card = new global::AIBridge.Card();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (who_ == null) {
              Who = new global::AIBridge.Player();
            }
            input.ReadMessage(Who);
            break;
          }
          case 26: {
            if (card_ == null) {
              Card = new global::AIBridge.Card();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameResult : pb::IMessage<GameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => new GameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AIBridge.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult(GameResult other) : this() {
      tableID_ = other.tableID_;
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      result_ = other.result_;
      declarerScore_ = other.declarerScore_;
      declarerPar_ = other.declarerPar_;
      declarerIMP_ = other.declarerIMP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult Clone() {
      return new GameResult(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 2;
    private global::AIBridge.Contract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AIBridge.Contract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "declarerScore" field.</summary>
    public const int DeclarerScoreFieldNumber = 4;
    private int declarerScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeclarerScore {
      get { return declarerScore_; }
      set {
        declarerScore_ = value;
      }
    }

    /// <summary>Field number for the "declarerPar" field.</summary>
    public const int DeclarerParFieldNumber = 5;
    private int declarerPar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeclarerPar {
      get { return declarerPar_; }
      set {
        declarerPar_ = value;
      }
    }

    /// <summary>Field number for the "declarerIMP" field.</summary>
    public const int DeclarerIMPFieldNumber = 6;
    private int declarerIMP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeclarerIMP {
      get { return declarerIMP_; }
      set {
        declarerIMP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      if (Result != other.Result) return false;
      if (DeclarerScore != other.DeclarerScore) return false;
      if (DeclarerPar != other.DeclarerPar) return false;
      if (DeclarerIMP != other.DeclarerIMP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (DeclarerScore != 0) hash ^= DeclarerScore.GetHashCode();
      if (DeclarerPar != 0) hash ^= DeclarerPar.GetHashCode();
      if (DeclarerIMP != 0) hash ^= DeclarerIMP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (contract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contract);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (DeclarerScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeclarerScore);
      }
      if (DeclarerPar != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeclarerPar);
      }
      if (DeclarerIMP != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeclarerIMP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (contract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contract);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (DeclarerScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeclarerScore);
      }
      if (DeclarerPar != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeclarerPar);
      }
      if (DeclarerIMP != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeclarerIMP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (DeclarerScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeclarerScore);
      }
      if (DeclarerPar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeclarerPar);
      }
      if (DeclarerIMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeclarerIMP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResult other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::AIBridge.Contract();
        }
        Contract.MergeFrom(other.Contract);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.DeclarerScore != 0) {
        DeclarerScore = other.DeclarerScore;
      }
      if (other.DeclarerPar != 0) {
        DeclarerPar = other.DeclarerPar;
      }
      if (other.DeclarerIMP != 0) {
        DeclarerIMP = other.DeclarerIMP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (contract_ == null) {
              Contract = new global::AIBridge.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 32: {
            DeclarerScore = input.ReadInt32();
            break;
          }
          case 40: {
            DeclarerPar = input.ReadInt32();
            break;
          }
          case 48: {
            DeclarerIMP = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (contract_ == null) {
              Contract = new global::AIBridge.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 32: {
            DeclarerScore = input.ReadInt32();
            break;
          }
          case 40: {
            DeclarerPar = input.ReadInt32();
            break;
          }
          case 48: {
            DeclarerIMP = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
