// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TestSocket {

  /// <summary>Holder for reflection information generated from message1.proto</summary>
  public static partial class Message1Reflection {

    #region Descriptor
    /// <summary>File descriptor for message1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Message1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlMS5wcm90bxIKdGVzdFNvY2tldCI0CgRDYXJkEh4KBHN1aXQY",
            "ASABKA4yEC50ZXN0U29ja2V0LlN1aXQSDAoEcmFuaxgCIAEoDSJRCgxUcmlj",
            "a0hpc3RvcnkSIAoEbGVhZBgBIAEoDjISLnRlc3RTb2NrZXQuUGxheWVyEh8K",
            "BWNhcmRzGAIgAygLMhAudGVzdFNvY2tldC5DYXJkIooBCghDb250cmFjdBIe",
            "CgRzdWl0GAEgASgOMhAudGVzdFNvY2tldC5TdWl0Eg0KBWxldmVsGAIgASgN",
            "Ei0KB2RvdWJsZWQYAyABKA4yHC50ZXN0U29ja2V0LkNvbnRyYWN0LkRvdWJs",
            "ZWQiIAoHRG91YmxlZBIGCgJOTxAAEgUKAVgQARIGCgJYWBACIjcKBUhlbGxv",
            "EiAKBHNlYXQYASABKA4yEi50ZXN0U29ja2V0LlBsYXllchIMCgRjb2RlGAIg",
            "ASgNIjAKDUhlbGxvUmVzcG9uc2USDgoGc2VhdGVkGAEgASgIEg8KB3RhYmxl",
            "SUQYAiABKA0iowIKCUdhbWVTdGF0ZRIPCgd0YWJsZUlEGAEgASgNEiYKDXZ1",
            "bG5lcmFiaWxpdHkYAiABKA4yDy50ZXN0U29ja2V0LlZ1bBIfCgN3aG8YAyAB",
            "KA4yEi50ZXN0U29ja2V0LlBsYXllchIeCgRoYW5kGAQgAygLMhAudGVzdFNv",
            "Y2tldC5DYXJkEh8KBWR1bW15GAUgAygLMhAudGVzdFNvY2tldC5DYXJkEi0K",
            "C3BsYXlIaXN0b3J5GAYgAygLMhgudGVzdFNvY2tldC5Ucmlja0hpc3RvcnkS",
            "JgoIY29udHJhY3QYByABKAsyFC50ZXN0U29ja2V0LkNvbnRyYWN0EiQKCnZh",
            "bGlkUGxheXMYCCADKAsyEC50ZXN0U29ja2V0LkNhcmQiWAoEUGxheRIPCgd0",
            "YWJsZUlEGAEgASgNEh8KA3dobxgCIAEoDjISLnRlc3RTb2NrZXQuUGxheWVy",
            "Eh4KBGNhcmQYAyABKAsyEC50ZXN0U29ja2V0LkNhcmQilgEKCkdhbWVSZXN1",
            "bHQSDwoHdGFibGVJRBgBIAEoDRImCghjb250cmFjdBgCIAEoCzIULnRlc3RT",
            "b2NrZXQuQ29udHJhY3QSDgoGcmVzdWx0GAMgASgFEhUKDWRlY2xhcmVyU2Nv",
            "cmUYBCABKAUSEwoLZGVjbGFyZXJQYXIYBSABKAUSEwoLZGVjbGFyZXJJTVAY",
            "BiABKAUqNQoGUGxheWVyEgwKCERFQ0xBUkVSEAASCAoETE9QUBABEgkKBURV",
            "TU1ZEAISCAoEUk9QUBADKmgKBFN1aXQSCAoEQ0xVQhAAEgUKAUMQABILCgdE",
            "SUFNT05EEAESBQoBRBABEgkKBUhFQVJUEAISBQoBSBACEgkKBVNQQURFEAMS",
            "BQoBUxADEgsKB05PVFJVTVAQBBIGCgJOVBAEGgIQASo1CgNWdWwSCAoETk9O",
            "RRAAEgwKCENPTlRSQUNUEAESDAoIREVGRU5ERVIQAhIICgRCT1RIEANiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TestSocket.Player), typeof(global::TestSocket.Suit), typeof(global::TestSocket.Vul), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.Card), global::TestSocket.Card.Parser, new[]{ "Suit", "Rank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.TrickHistory), global::TestSocket.TrickHistory.Parser, new[]{ "Lead", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.Contract), global::TestSocket.Contract.Parser, new[]{ "Suit", "Level", "Doubled" }, null, new[]{ typeof(global::TestSocket.Contract.Types.Doubled) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.Hello), global::TestSocket.Hello.Parser, new[]{ "Seat", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.HelloResponse), global::TestSocket.HelloResponse.Parser, new[]{ "Seated", "TableID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.GameState), global::TestSocket.GameState.Parser, new[]{ "TableID", "Vulnerability", "Who", "Hand", "Dummy", "PlayHistory", "Contract", "ValidPlays" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.Play), global::TestSocket.Play.Parser, new[]{ "TableID", "Who", "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TestSocket.GameResult), global::TestSocket.GameResult.Parser, new[]{ "TableID", "Contract", "Result", "DeclarerScore", "DeclarerPar", "DeclarerIMP" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Player {
    [pbr::OriginalName("DECLARER")] Declarer = 0,
    [pbr::OriginalName("LOPP")] Lopp = 1,
    [pbr::OriginalName("DUMMY")] Dummy = 2,
    [pbr::OriginalName("ROPP")] Ropp = 3,
  }

  public enum Suit {
    [pbr::OriginalName("CLUB")] Club = 0,
    [pbr::OriginalName("C", PreferredAlias = false)] C = 0,
    [pbr::OriginalName("DIAMOND")] Diamond = 1,
    [pbr::OriginalName("D", PreferredAlias = false)] D = 1,
    [pbr::OriginalName("HEART")] Heart = 2,
    [pbr::OriginalName("H", PreferredAlias = false)] H = 2,
    [pbr::OriginalName("SPADE")] Spade = 3,
    [pbr::OriginalName("S", PreferredAlias = false)] S = 3,
    [pbr::OriginalName("NOTRUMP")] Notrump = 4,
    [pbr::OriginalName("NT", PreferredAlias = false)] Nt = 4,
  }

  public enum Vul {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("CONTRACT")] Contract = 1,
    [pbr::OriginalName("DEFENDER")] Defender = 2,
    [pbr::OriginalName("BOTH")] Both = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      suit_ = other.suit_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 1;
    private global::TestSocket.Suit suit_ = global::TestSocket.Suit.Club;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Suit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suit != other.Suit) return false;
      if (Rank != other.Rank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suit != global::TestSocket.Suit.Club) hash ^= Suit.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Suit != global::TestSocket.Suit.Club) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Suit != global::TestSocket.Suit.Club) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suit != global::TestSocket.Suit.Club) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Suit != global::TestSocket.Suit.Club) {
        Suit = other.Suit;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Suit = (global::TestSocket.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Suit = (global::TestSocket.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrickHistory : pb::IMessage<TrickHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrickHistory> _parser = new pb::MessageParser<TrickHistory>(() => new TrickHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrickHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrickHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrickHistory(TrickHistory other) : this() {
      lead_ = other.lead_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrickHistory Clone() {
      return new TrickHistory(this);
    }

    /// <summary>Field number for the "lead" field.</summary>
    public const int LeadFieldNumber = 1;
    private global::TestSocket.Player lead_ = global::TestSocket.Player.Declarer;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Player Lead {
      get { return lead_; }
      set {
        lead_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TestSocket.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::TestSocket.Card.Parser);
    private readonly pbc::RepeatedField<global::TestSocket.Card> cards_ = new pbc::RepeatedField<global::TestSocket.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TestSocket.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrickHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrickHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lead != other.Lead) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lead != global::TestSocket.Player.Declarer) hash ^= Lead.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Lead != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Lead);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Lead != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Lead);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lead != global::TestSocket.Player.Declarer) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Lead);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrickHistory other) {
      if (other == null) {
        return;
      }
      if (other.Lead != global::TestSocket.Player.Declarer) {
        Lead = other.Lead;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Lead = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Lead = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Contract : pb::IMessage<Contract>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract(Contract other) : this() {
      suit_ = other.suit_;
      level_ = other.level_;
      doubled_ = other.doubled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contract Clone() {
      return new Contract(this);
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 1;
    private global::TestSocket.Suit suit_ = global::TestSocket.Suit.Club;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Suit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "doubled" field.</summary>
    public const int DoubledFieldNumber = 3;
    private global::TestSocket.Contract.Types.Doubled doubled_ = global::TestSocket.Contract.Types.Doubled.No;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Contract.Types.Doubled Doubled {
      get { return doubled_; }
      set {
        doubled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suit != other.Suit) return false;
      if (Level != other.Level) return false;
      if (Doubled != other.Doubled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suit != global::TestSocket.Suit.Club) hash ^= Suit.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Doubled != global::TestSocket.Contract.Types.Doubled.No) hash ^= Doubled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Suit != global::TestSocket.Suit.Club) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Doubled != global::TestSocket.Contract.Types.Doubled.No) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Doubled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Suit != global::TestSocket.Suit.Club) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Doubled != global::TestSocket.Contract.Types.Doubled.No) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Doubled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suit != global::TestSocket.Suit.Club) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Doubled != global::TestSocket.Contract.Types.Doubled.No) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Doubled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contract other) {
      if (other == null) {
        return;
      }
      if (other.Suit != global::TestSocket.Suit.Club) {
        Suit = other.Suit;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Doubled != global::TestSocket.Contract.Types.Doubled.No) {
        Doubled = other.Doubled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Suit = (global::TestSocket.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Doubled = (global::TestSocket.Contract.Types.Doubled) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Suit = (global::TestSocket.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Doubled = (global::TestSocket.Contract.Types.Doubled) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Contract message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Doubled {
        [pbr::OriginalName("NO")] No = 0,
        [pbr::OriginalName("X")] X = 1,
        [pbr::OriginalName("XX")] Xx = 2,
      }

    }
    #endregion

  }

  public sealed partial class Hello : pb::IMessage<Hello>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hello> _parser = new pb::MessageParser<Hello>(() => new Hello());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hello> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hello() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hello(Hello other) : this() {
      seat_ = other.seat_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hello Clone() {
      return new Hello(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 1;
    private global::TestSocket.Player seat_ = global::TestSocket.Player.Declarer;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Player Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hello);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hello other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seat != other.Seat) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seat != global::TestSocket.Player.Declarer) hash ^= Seat.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seat != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Seat);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seat != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Seat);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seat != global::TestSocket.Player.Declarer) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Seat);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hello other) {
      if (other == null) {
        return;
      }
      if (other.Seat != global::TestSocket.Player.Declarer) {
        Seat = other.Seat;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seat = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seat = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HelloResponse : pb::IMessage<HelloResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HelloResponse> _parser = new pb::MessageParser<HelloResponse>(() => new HelloResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse(HelloResponse other) : this() {
      seated_ = other.seated_;
      tableID_ = other.tableID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse Clone() {
      return new HelloResponse(this);
    }

    /// <summary>Field number for the "seated" field.</summary>
    public const int SeatedFieldNumber = 1;
    private bool seated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Seated {
      get { return seated_; }
      set {
        seated_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 2;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seated != other.Seated) return false;
      if (TableID != other.TableID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seated != false) hash ^= Seated.GetHashCode();
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Seated);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TableID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Seated);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TableID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seated != false) {
        size += 1 + 1;
      }
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloResponse other) {
      if (other == null) {
        return;
      }
      if (other.Seated != false) {
        Seated = other.Seated;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seated = input.ReadBool();
            break;
          }
          case 16: {
            TableID = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seated = input.ReadBool();
            break;
          }
          case 16: {
            TableID = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      tableID_ = other.tableID_;
      vulnerability_ = other.vulnerability_;
      who_ = other.who_;
      hand_ = other.hand_.Clone();
      dummy_ = other.dummy_.Clone();
      playHistory_ = other.playHistory_.Clone();
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      validPlays_ = other.validPlays_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 2;
    private global::TestSocket.Vul vulnerability_ = global::TestSocket.Vul.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Vul Vulnerability {
      get { return vulnerability_; }
      set {
        vulnerability_ = value;
      }
    }

    /// <summary>Field number for the "who" field.</summary>
    public const int WhoFieldNumber = 3;
    private global::TestSocket.Player who_ = global::TestSocket.Player.Declarer;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Player Who {
      get { return who_; }
      set {
        who_ = value;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TestSocket.Card> _repeated_hand_codec
        = pb::FieldCodec.ForMessage(34, global::TestSocket.Card.Parser);
    private readonly pbc::RepeatedField<global::TestSocket.Card> hand_ = new pbc::RepeatedField<global::TestSocket.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TestSocket.Card> Hand {
      get { return hand_; }
    }

    /// <summary>Field number for the "dummy" field.</summary>
    public const int DummyFieldNumber = 5;
    private static readonly pb::FieldCodec<global::TestSocket.Card> _repeated_dummy_codec
        = pb::FieldCodec.ForMessage(42, global::TestSocket.Card.Parser);
    private readonly pbc::RepeatedField<global::TestSocket.Card> dummy_ = new pbc::RepeatedField<global::TestSocket.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TestSocket.Card> Dummy {
      get { return dummy_; }
    }

    /// <summary>Field number for the "playHistory" field.</summary>
    public const int PlayHistoryFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TestSocket.TrickHistory> _repeated_playHistory_codec
        = pb::FieldCodec.ForMessage(50, global::TestSocket.TrickHistory.Parser);
    private readonly pbc::RepeatedField<global::TestSocket.TrickHistory> playHistory_ = new pbc::RepeatedField<global::TestSocket.TrickHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TestSocket.TrickHistory> PlayHistory {
      get { return playHistory_; }
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 7;
    private global::TestSocket.Contract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Contract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    /// <summary>Field number for the "validPlays" field.</summary>
    public const int ValidPlaysFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TestSocket.Card> _repeated_validPlays_codec
        = pb::FieldCodec.ForMessage(66, global::TestSocket.Card.Parser);
    private readonly pbc::RepeatedField<global::TestSocket.Card> validPlays_ = new pbc::RepeatedField<global::TestSocket.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TestSocket.Card> ValidPlays {
      get { return validPlays_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (Vulnerability != other.Vulnerability) return false;
      if (Who != other.Who) return false;
      if(!hand_.Equals(other.hand_)) return false;
      if(!dummy_.Equals(other.dummy_)) return false;
      if(!playHistory_.Equals(other.playHistory_)) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      if(!validPlays_.Equals(other.validPlays_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (Vulnerability != global::TestSocket.Vul.None) hash ^= Vulnerability.GetHashCode();
      if (Who != global::TestSocket.Player.Declarer) hash ^= Who.GetHashCode();
      hash ^= hand_.GetHashCode();
      hash ^= dummy_.GetHashCode();
      hash ^= playHistory_.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      hash ^= validPlays_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Vulnerability != global::TestSocket.Vul.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Vulnerability);
      }
      if (Who != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Who);
      }
      hand_.WriteTo(output, _repeated_hand_codec);
      dummy_.WriteTo(output, _repeated_dummy_codec);
      playHistory_.WriteTo(output, _repeated_playHistory_codec);
      if (contract_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Contract);
      }
      validPlays_.WriteTo(output, _repeated_validPlays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Vulnerability != global::TestSocket.Vul.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Vulnerability);
      }
      if (Who != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Who);
      }
      hand_.WriteTo(ref output, _repeated_hand_codec);
      dummy_.WriteTo(ref output, _repeated_dummy_codec);
      playHistory_.WriteTo(ref output, _repeated_playHistory_codec);
      if (contract_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Contract);
      }
      validPlays_.WriteTo(ref output, _repeated_validPlays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (Vulnerability != global::TestSocket.Vul.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Vulnerability);
      }
      if (Who != global::TestSocket.Player.Declarer) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Who);
      }
      size += hand_.CalculateSize(_repeated_hand_codec);
      size += dummy_.CalculateSize(_repeated_dummy_codec);
      size += playHistory_.CalculateSize(_repeated_playHistory_codec);
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      size += validPlays_.CalculateSize(_repeated_validPlays_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.Vulnerability != global::TestSocket.Vul.None) {
        Vulnerability = other.Vulnerability;
      }
      if (other.Who != global::TestSocket.Player.Declarer) {
        Who = other.Who;
      }
      hand_.Add(other.hand_);
      dummy_.Add(other.dummy_);
      playHistory_.Add(other.playHistory_);
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::TestSocket.Contract();
        }
        Contract.MergeFrom(other.Contract);
      }
      validPlays_.Add(other.validPlays_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Vulnerability = (global::TestSocket.Vul) input.ReadEnum();
            break;
          }
          case 24: {
            Who = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 34: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
          case 42: {
            dummy_.AddEntriesFrom(input, _repeated_dummy_codec);
            break;
          }
          case 50: {
            playHistory_.AddEntriesFrom(input, _repeated_playHistory_codec);
            break;
          }
          case 58: {
            if (contract_ == null) {
              Contract = new global::TestSocket.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 66: {
            validPlays_.AddEntriesFrom(input, _repeated_validPlays_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Vulnerability = (global::TestSocket.Vul) input.ReadEnum();
            break;
          }
          case 24: {
            Who = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 34: {
            hand_.AddEntriesFrom(ref input, _repeated_hand_codec);
            break;
          }
          case 42: {
            dummy_.AddEntriesFrom(ref input, _repeated_dummy_codec);
            break;
          }
          case 50: {
            playHistory_.AddEntriesFrom(ref input, _repeated_playHistory_codec);
            break;
          }
          case 58: {
            if (contract_ == null) {
              Contract = new global::TestSocket.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 66: {
            validPlays_.AddEntriesFrom(ref input, _repeated_validPlays_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Play : pb::IMessage<Play>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Play> _parser = new pb::MessageParser<Play>(() => new Play());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Play> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play(Play other) : this() {
      tableID_ = other.tableID_;
      who_ = other.who_;
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play Clone() {
      return new Play(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "who" field.</summary>
    public const int WhoFieldNumber = 2;
    private global::TestSocket.Player who_ = global::TestSocket.Player.Declarer;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Player Who {
      get { return who_; }
      set {
        who_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 3;
    private global::TestSocket.Card card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Play);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Play other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (Who != other.Who) return false;
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (Who != global::TestSocket.Player.Declarer) hash ^= Who.GetHashCode();
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Who != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Who);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (Who != global::TestSocket.Player.Declarer) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Who);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (Who != global::TestSocket.Player.Declarer) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Who);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Play other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.Who != global::TestSocket.Player.Declarer) {
        Who = other.Who;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::TestSocket.Card();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Who = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 26: {
            if (card_ == null) {
              Card = new global::TestSocket.Card();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 16: {
            Who = (global::TestSocket.Player) input.ReadEnum();
            break;
          }
          case 26: {
            if (card_ == null) {
              Card = new global::TestSocket.Card();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameResult : pb::IMessage<GameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => new GameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestSocket.Message1Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult(GameResult other) : this() {
      tableID_ = other.tableID_;
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      result_ = other.result_;
      declarerScore_ = other.declarerScore_;
      declarerPar_ = other.declarerPar_;
      declarerIMP_ = other.declarerIMP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult Clone() {
      return new GameResult(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 1;
    private uint tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 2;
    private global::TestSocket.Contract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TestSocket.Contract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "declarerScore" field.</summary>
    public const int DeclarerScoreFieldNumber = 4;
    private int declarerScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeclarerScore {
      get { return declarerScore_; }
      set {
        declarerScore_ = value;
      }
    }

    /// <summary>Field number for the "declarerPar" field.</summary>
    public const int DeclarerParFieldNumber = 5;
    private int declarerPar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeclarerPar {
      get { return declarerPar_; }
      set {
        declarerPar_ = value;
      }
    }

    /// <summary>Field number for the "declarerIMP" field.</summary>
    public const int DeclarerIMPFieldNumber = 6;
    private int declarerIMP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeclarerIMP {
      get { return declarerIMP_; }
      set {
        declarerIMP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      if (Result != other.Result) return false;
      if (DeclarerScore != other.DeclarerScore) return false;
      if (DeclarerPar != other.DeclarerPar) return false;
      if (DeclarerIMP != other.DeclarerIMP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (DeclarerScore != 0) hash ^= DeclarerScore.GetHashCode();
      if (DeclarerPar != 0) hash ^= DeclarerPar.GetHashCode();
      if (DeclarerIMP != 0) hash ^= DeclarerIMP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (contract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contract);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (DeclarerScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeclarerScore);
      }
      if (DeclarerPar != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeclarerPar);
      }
      if (DeclarerIMP != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeclarerIMP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableID);
      }
      if (contract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contract);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (DeclarerScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeclarerScore);
      }
      if (DeclarerPar != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeclarerPar);
      }
      if (DeclarerIMP != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeclarerIMP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableID);
      }
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (DeclarerScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeclarerScore);
      }
      if (DeclarerPar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeclarerPar);
      }
      if (DeclarerIMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeclarerIMP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResult other) {
      if (other == null) {
        return;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::TestSocket.Contract();
        }
        Contract.MergeFrom(other.Contract);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.DeclarerScore != 0) {
        DeclarerScore = other.DeclarerScore;
      }
      if (other.DeclarerPar != 0) {
        DeclarerPar = other.DeclarerPar;
      }
      if (other.DeclarerIMP != 0) {
        DeclarerIMP = other.DeclarerIMP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (contract_ == null) {
              Contract = new global::TestSocket.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 32: {
            DeclarerScore = input.ReadInt32();
            break;
          }
          case 40: {
            DeclarerPar = input.ReadInt32();
            break;
          }
          case 48: {
            DeclarerIMP = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (contract_ == null) {
              Contract = new global::TestSocket.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 32: {
            DeclarerScore = input.ReadInt32();
            break;
          }
          case 40: {
            DeclarerPar = input.ReadInt32();
            break;
          }
          case 48: {
            DeclarerIMP = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
